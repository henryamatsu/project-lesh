// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =====
// enums
// =====
enum QuestStatus {
  ONGOING
  ABANDONED
  FAILED
  SUCCEEDED
}

enum EncounterReward {
  ONE
  TWO
  THREE
}

enum ActionEffect {
  ONE
  TWO
  THREE
}

enum ActionApproach {
  VIOLENCE
  DIPLOMACY
  SUBTERFUGE
  GENERAL
}

// =====
// game models
// =====
model User {
  id            Int         @id @default(autoincrement())
  characterList Character[]
  name          String
}

model Character {
  id        Int     @id @default(autoincrement())
  userId    Int?
  user      User?   @relation(fields: [userId], references: [id])
  questList Quest[]
  name      String
  might     Int
  cunning   Int
  charm     Int
  health    Int
  gold      Int
  inventory Json // string[] (JSON item ids)
  powers    Json // string[] (JSON item ids)
}

model Quest {
  id             Int         @id @default(autoincrement())
  characterId    Int
  character      Character   @relation(fields: [characterId], references: [id])
  encounterList  Encounter[]
  questLineId    Int?
  questLineIndex Int?
  name           String
  status         QuestStatus
  objective      String
  difficulty     Int
  minDifficulty  Int
  maxDifficulty  Int
  encounterLimit Int
  storyBeats     Json // string[]
}

model Encounter {
  id            Int         @id @default(autoincrement())
  questId       Int
  quest         Quest       @relation(fields: [questId], references: [id])
  objectiveList Objective[]
  actionList    Action[]
  name          String
  promptLimit   Int
}

model Objective {
  id           Int       @id @default(autoincrement())
  encounterId  Int
  encounter    Encounter @relation(fields: [encounterId], references: [id])
  name         String
  rewardList   Json // EncounterReward[]
  approachList Json // ActionApproach[]
  difficulty   Int
  rollResult   Int?
}

model Action {
  id          Int            @id @default(autoincrement())
  encounterId Int
  encounter   Encounter      @relation(fields: [encounterId], references: [id])
  name        String
  effectList  Json // ActionEffect[]
  approach    ActionApproach
  difficulty  Int
  rollResult  Int?
}
